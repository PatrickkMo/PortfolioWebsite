/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module manual_tester_5 (
    input clk,
    input rst,
    input [23:0] io_dip,
    input state_change_btn,
    input forced_error,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [23:0] io_led
  );
  
  
  
  wire [1-1:0] M_button_cond_out;
  reg [1-1:0] M_button_cond_in;
  button_conditioner_2 button_cond (
    .clk(clk),
    .in(M_button_cond_in),
    .out(M_button_cond_out)
  );
  wire [1-1:0] M_required_error_out;
  reg [1-1:0] M_required_error_in;
  button_conditioner_2 required_error (
    .clk(clk),
    .in(M_required_error_in),
    .out(M_required_error_out)
  );
  wire [1-1:0] M_edge_out;
  reg [1-1:0] M_edge_in;
  edge_detector_3 L_edge (
    .clk(clk),
    .in(M_edge_in),
    .out(M_edge_out)
  );
  wire [1-1:0] M_error_edge_out;
  reg [1-1:0] M_error_edge_in;
  edge_detector_3 error_edge (
    .clk(clk),
    .in(M_error_edge_in),
    .out(M_error_edge_out)
  );
  localparam X_state = 2'd0;
  localparam Y_state = 2'd1;
  localparam OUTPUT_state = 2'd2;
  localparam ERROR_CHECK_state = 2'd3;
  
  reg [1:0] M_state_d, M_state_q = X_state;
  reg [15:0] M_x_d, M_x_q = 1'h0;
  reg [15:0] M_y_d, M_y_q = 1'h0;
  reg [15:0] M_out_d, M_out_q = 1'h0;
  reg [5:0] M_alufn_d, M_alufn_q = 1'h0;
  reg M_error_d, M_error_q = 1'h0;
  wire [7-1:0] M_seg_display_seg;
  wire [4-1:0] M_seg_display_sel;
  reg [16-1:0] M_seg_display_values;
  multi_seven_seg_24 seg_display (
    .clk(clk),
    .rst(rst),
    .values(M_seg_display_values),
    .seg(M_seg_display_seg),
    .sel(M_seg_display_sel)
  );
  
  wire [16-1:0] M_alu_out;
  wire [1-1:0] M_alu_z;
  wire [1-1:0] M_alu_v;
  wire [1-1:0] M_alu_n;
  wire [1-1:0] M_alu_err;
  alu16_25 alu (
    .alufn(M_alufn_q),
    .x(M_x_q),
    .y(M_y_q),
    .out(M_alu_out),
    .z(M_alu_z),
    .v(M_alu_v),
    .n(M_alu_n),
    .err(M_alu_err)
  );
  
  reg state_change;
  
  reg compulsory_error;
  
  always @* begin
    M_state_d = M_state_q;
    M_x_d = M_x_q;
    M_y_d = M_y_q;
    M_alufn_d = M_alufn_q;
    M_error_d = M_error_q;
    M_out_d = M_out_q;
    
    M_button_cond_in = state_change_btn;
    M_edge_in = M_button_cond_out;
    state_change = M_edge_out;
    M_required_error_in = forced_error;
    M_error_edge_in = M_required_error_out;
    compulsory_error = M_error_edge_out;
    io_sel = 4'he;
    io_seg = 8'h00;
    M_out_d = M_alu_out;
    M_error_d = M_alu_err;
    M_seg_display_values = 16'h0000;
    io_led = 24'h000000;
    io_led[16+0+5-:6] = M_alufn_q;
    M_alufn_d = io_dip[16+0+5-:6];
    
    case (M_state_q)
      X_state: begin
        M_x_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        io_led[0+15-:16] = {M_x_q[8+7-:8], M_x_q[0+7-:8]};
        io_led[16+6+1-:2] = 2'h2;
        io_seg = 8'h89;
        if (state_change) begin
          M_state_d = Y_state;
        end
        if (compulsory_error) begin
          M_state_d = ERROR_CHECK_state;
        end
      end
      Y_state: begin
        M_y_d = {io_dip[8+7-:8], io_dip[0+7-:8]};
        io_led[0+15-:16] = {M_y_q[8+7-:8], M_y_q[0+7-:8]};
        io_led[16+6+1-:2] = 2'h1;
        io_seg = 8'h91;
        if (state_change) begin
          M_state_d = OUTPUT_state;
        end
        if (compulsory_error) begin
          M_state_d = ERROR_CHECK_state;
        end
      end
      OUTPUT_state: begin
        io_led[0+15-:16] = {M_out_q[8+7-:8], M_out_q[0+7-:8]};
        io_led[16+6+1-:2] = 2'h3;
        io_seg = 8'ha3;
        io_led[16+0+0-:1] = M_alu_z;
        io_led[16+1+0-:1] = M_alu_v;
        io_led[16+2+0-:1] = M_alu_n;
        if (M_error_q) begin
          M_state_d = ERROR_CHECK_state;
        end
        if (state_change) begin
          M_state_d = X_state;
        end
        if (compulsory_error) begin
          M_state_d = ERROR_CHECK_state;
        end
      end
      ERROR_CHECK_state: begin
        io_led = 24'h000000;
        M_seg_display_values = 16'heeee;
        io_seg = ~M_seg_display_seg;
        io_sel = ~M_seg_display_sel;
        if (state_change) begin
          M_state_d = X_state;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_x_q <= 1'h0;
      M_y_q <= 1'h0;
      M_out_q <= 1'h0;
      M_alufn_q <= 1'h0;
      M_error_q <= 1'h0;
      M_state_q <= 1'h0;
    end else begin
      M_x_q <= M_x_d;
      M_y_q <= M_y_d;
      M_out_q <= M_out_d;
      M_alufn_q <= M_alufn_d;
      M_error_q <= M_error_d;
      M_state_q <= M_state_d;
    end
  end
  
endmodule
