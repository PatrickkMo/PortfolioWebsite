/*
   This file was generated automatically by Alchitry Labs version 1.2.7.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_tester_4 (
    input clk,
    input rst,
    input start,
    input error,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    output reg [5:0] opcode_led
  );
  
  
  
  localparam STANDBY_autostate = 5'd0;
  localparam TEST_0_autostate = 5'd1;
  localparam TEST_1_autostate = 5'd2;
  localparam TEST_2_autostate = 5'd3;
  localparam TEST_3_autostate = 5'd4;
  localparam TEST_4_autostate = 5'd5;
  localparam TEST_5_autostate = 5'd6;
  localparam TEST_6_autostate = 5'd7;
  localparam TEST_7_autostate = 5'd8;
  localparam TEST_8_autostate = 5'd9;
  localparam TEST_9_autostate = 5'd10;
  localparam TEST_10_autostate = 5'd11;
  localparam TEST_11_autostate = 5'd12;
  localparam TEST_12_autostate = 5'd13;
  localparam TEST_13_autostate = 5'd14;
  localparam TEST_14_autostate = 5'd15;
  localparam TEST_15_autostate = 5'd16;
  localparam TEST_16_autostate = 5'd17;
  localparam TEST_17_autostate = 5'd18;
  localparam TEST_18_autostate = 5'd19;
  localparam DONE_autostate = 5'd20;
  localparam ERROR_autostate = 5'd21;
  
  reg [4:0] M_autostate_d, M_autostate_q = STANDBY_autostate;
  wire [8-1:0] M_test_0_io_seg;
  wire [4-1:0] M_test_0_io_sel;
  wire [6-1:0] M_test_0_opcode_led;
  wire [1-1:0] M_test_0_done;
  reg [1-1:0] M_test_0_start;
  statement_tester_7 test_0 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_0_start),
    .io_seg(M_test_0_io_seg),
    .io_sel(M_test_0_io_sel),
    .opcode_led(M_test_0_opcode_led),
    .done(M_test_0_done)
  );
  wire [8-1:0] M_test_1_io_seg;
  wire [4-1:0] M_test_1_io_sel;
  wire [6-1:0] M_test_1_opcode_led;
  wire [1-1:0] M_test_1_done;
  reg [1-1:0] M_test_1_start;
  statement_tester_8 test_1 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_1_start),
    .io_seg(M_test_1_io_seg),
    .io_sel(M_test_1_io_sel),
    .opcode_led(M_test_1_opcode_led),
    .done(M_test_1_done)
  );
  wire [8-1:0] M_test_2_io_seg;
  wire [4-1:0] M_test_2_io_sel;
  wire [6-1:0] M_test_2_opcode_led;
  wire [1-1:0] M_test_2_done;
  reg [1-1:0] M_test_2_start;
  statement_tester_9 test_2 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_2_start),
    .io_seg(M_test_2_io_seg),
    .io_sel(M_test_2_io_sel),
    .opcode_led(M_test_2_opcode_led),
    .done(M_test_2_done)
  );
  wire [8-1:0] M_test_3_io_seg;
  wire [4-1:0] M_test_3_io_sel;
  wire [6-1:0] M_test_3_opcode_led;
  wire [1-1:0] M_test_3_done;
  reg [1-1:0] M_test_3_start;
  statement_tester_10 test_3 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_3_start),
    .io_seg(M_test_3_io_seg),
    .io_sel(M_test_3_io_sel),
    .opcode_led(M_test_3_opcode_led),
    .done(M_test_3_done)
  );
  wire [8-1:0] M_test_4_io_seg;
  wire [4-1:0] M_test_4_io_sel;
  wire [6-1:0] M_test_4_opcode_led;
  wire [1-1:0] M_test_4_done;
  reg [1-1:0] M_test_4_start;
  statement_tester_11 test_4 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_4_start),
    .io_seg(M_test_4_io_seg),
    .io_sel(M_test_4_io_sel),
    .opcode_led(M_test_4_opcode_led),
    .done(M_test_4_done)
  );
  wire [8-1:0] M_test_5_io_seg;
  wire [4-1:0] M_test_5_io_sel;
  wire [6-1:0] M_test_5_opcode_led;
  wire [1-1:0] M_test_5_done;
  reg [1-1:0] M_test_5_start;
  statement_tester_12 test_5 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_5_start),
    .io_seg(M_test_5_io_seg),
    .io_sel(M_test_5_io_sel),
    .opcode_led(M_test_5_opcode_led),
    .done(M_test_5_done)
  );
  wire [8-1:0] M_test_6_io_seg;
  wire [4-1:0] M_test_6_io_sel;
  wire [6-1:0] M_test_6_opcode_led;
  wire [1-1:0] M_test_6_done;
  reg [1-1:0] M_test_6_start;
  statement_tester_13 test_6 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_6_start),
    .io_seg(M_test_6_io_seg),
    .io_sel(M_test_6_io_sel),
    .opcode_led(M_test_6_opcode_led),
    .done(M_test_6_done)
  );
  wire [8-1:0] M_test_7_io_seg;
  wire [4-1:0] M_test_7_io_sel;
  wire [6-1:0] M_test_7_opcode_led;
  wire [1-1:0] M_test_7_done;
  reg [1-1:0] M_test_7_start;
  statement_tester_14 test_7 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_7_start),
    .io_seg(M_test_7_io_seg),
    .io_sel(M_test_7_io_sel),
    .opcode_led(M_test_7_opcode_led),
    .done(M_test_7_done)
  );
  wire [8-1:0] M_test_8_io_seg;
  wire [4-1:0] M_test_8_io_sel;
  wire [6-1:0] M_test_8_opcode_led;
  wire [1-1:0] M_test_8_done;
  reg [1-1:0] M_test_8_start;
  statement_tester_15 test_8 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_8_start),
    .io_seg(M_test_8_io_seg),
    .io_sel(M_test_8_io_sel),
    .opcode_led(M_test_8_opcode_led),
    .done(M_test_8_done)
  );
  wire [8-1:0] M_test_9_io_seg;
  wire [4-1:0] M_test_9_io_sel;
  wire [6-1:0] M_test_9_opcode_led;
  wire [1-1:0] M_test_9_done;
  reg [1-1:0] M_test_9_start;
  statement_tester_16 test_9 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_9_start),
    .io_seg(M_test_9_io_seg),
    .io_sel(M_test_9_io_sel),
    .opcode_led(M_test_9_opcode_led),
    .done(M_test_9_done)
  );
  wire [8-1:0] M_test_12_io_seg;
  wire [4-1:0] M_test_12_io_sel;
  wire [6-1:0] M_test_12_opcode_led;
  wire [1-1:0] M_test_12_done;
  reg [1-1:0] M_test_12_start;
  statement_tester_17 test_12 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_12_start),
    .io_seg(M_test_12_io_seg),
    .io_sel(M_test_12_io_sel),
    .opcode_led(M_test_12_opcode_led),
    .done(M_test_12_done)
  );
  wire [8-1:0] M_test_13_io_seg;
  wire [4-1:0] M_test_13_io_sel;
  wire [6-1:0] M_test_13_opcode_led;
  wire [1-1:0] M_test_13_done;
  reg [1-1:0] M_test_13_start;
  statement_tester_18 test_13 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_13_start),
    .io_seg(M_test_13_io_seg),
    .io_sel(M_test_13_io_sel),
    .opcode_led(M_test_13_opcode_led),
    .done(M_test_13_done)
  );
  wire [8-1:0] M_test_14_io_seg;
  wire [4-1:0] M_test_14_io_sel;
  wire [6-1:0] M_test_14_opcode_led;
  wire [1-1:0] M_test_14_done;
  reg [1-1:0] M_test_14_start;
  statement_tester_19 test_14 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_14_start),
    .io_seg(M_test_14_io_seg),
    .io_sel(M_test_14_io_sel),
    .opcode_led(M_test_14_opcode_led),
    .done(M_test_14_done)
  );
  wire [8-1:0] M_test_15_io_seg;
  wire [4-1:0] M_test_15_io_sel;
  wire [6-1:0] M_test_15_opcode_led;
  wire [1-1:0] M_test_15_done;
  reg [1-1:0] M_test_15_start;
  statement_tester_20 test_15 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_15_start),
    .io_seg(M_test_15_io_seg),
    .io_sel(M_test_15_io_sel),
    .opcode_led(M_test_15_opcode_led),
    .done(M_test_15_done)
  );
  wire [8-1:0] M_test_16_io_seg;
  wire [4-1:0] M_test_16_io_sel;
  wire [6-1:0] M_test_16_opcode_led;
  wire [1-1:0] M_test_16_done;
  reg [1-1:0] M_test_16_start;
  statement_tester_21 test_16 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_16_start),
    .io_seg(M_test_16_io_seg),
    .io_sel(M_test_16_io_sel),
    .opcode_led(M_test_16_opcode_led),
    .done(M_test_16_done)
  );
  wire [8-1:0] M_test_17_io_seg;
  wire [4-1:0] M_test_17_io_sel;
  wire [6-1:0] M_test_17_opcode_led;
  wire [1-1:0] M_test_17_done;
  reg [1-1:0] M_test_17_start;
  statement_tester_22 test_17 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_17_start),
    .io_seg(M_test_17_io_seg),
    .io_sel(M_test_17_io_sel),
    .opcode_led(M_test_17_opcode_led),
    .done(M_test_17_done)
  );
  wire [8-1:0] M_test_18_io_seg;
  wire [4-1:0] M_test_18_io_sel;
  wire [6-1:0] M_test_18_opcode_led;
  wire [1-1:0] M_test_18_done;
  reg [1-1:0] M_test_18_start;
  statement_tester_23 test_18 (
    .clk(clk),
    .rst(rst),
    .error(error),
    .start(M_test_18_start),
    .io_seg(M_test_18_io_seg),
    .io_sel(M_test_18_io_sel),
    .opcode_led(M_test_18_opcode_led),
    .done(M_test_18_done)
  );
  
  always @* begin
    M_autostate_d = M_autostate_q;
    
    io_seg = 1'h0;
    io_sel = 1'h0;
    opcode_led = 1'h0;
    M_test_0_start = 1'h0;
    M_test_1_start = 1'h0;
    M_test_2_start = 1'h0;
    M_test_3_start = 1'h0;
    M_test_4_start = 1'h0;
    M_test_5_start = 1'h0;
    M_test_6_start = 1'h0;
    M_test_7_start = 1'h0;
    M_test_8_start = 1'h0;
    M_test_9_start = 1'h0;
    M_test_12_start = 1'h0;
    M_test_13_start = 1'h0;
    M_test_14_start = 1'h0;
    M_test_15_start = 1'h0;
    M_test_16_start = 1'h0;
    M_test_17_start = 1'h0;
    M_test_18_start = 1'h0;
    
    case (M_autostate_q)
      STANDBY_autostate: begin
        if (start) begin
          M_autostate_d = TEST_0_autostate;
        end
      end
      TEST_0_autostate: begin
        io_seg = M_test_0_io_seg;
        io_sel = M_test_0_io_sel;
        opcode_led = M_test_0_opcode_led;
        M_test_0_start = 1'h1;
        if (M_test_0_done) begin
          M_autostate_d = TEST_1_autostate;
        end
      end
      TEST_1_autostate: begin
        io_seg = M_test_1_io_seg;
        io_sel = M_test_1_io_sel;
        opcode_led = M_test_1_opcode_led;
        M_test_1_start = 1'h1;
        if (M_test_1_done) begin
          M_autostate_d = TEST_2_autostate;
        end
      end
      TEST_2_autostate: begin
        io_seg = M_test_2_io_seg;
        io_sel = M_test_2_io_sel;
        opcode_led = M_test_2_opcode_led;
        M_test_2_start = 1'h1;
        if (M_test_2_done) begin
          M_autostate_d = TEST_3_autostate;
        end
      end
      TEST_3_autostate: begin
        io_seg = M_test_3_io_seg;
        io_sel = M_test_3_io_sel;
        opcode_led = M_test_3_opcode_led;
        M_test_3_start = 1'h1;
        if (M_test_3_done) begin
          M_autostate_d = TEST_4_autostate;
        end
      end
      TEST_4_autostate: begin
        io_seg = M_test_4_io_seg;
        io_sel = M_test_4_io_sel;
        opcode_led = M_test_4_opcode_led;
        M_test_4_start = 1'h1;
        if (M_test_4_done) begin
          M_autostate_d = TEST_5_autostate;
        end
      end
      TEST_5_autostate: begin
        io_seg = M_test_5_io_seg;
        io_sel = M_test_5_io_sel;
        opcode_led = M_test_5_opcode_led;
        M_test_5_start = 1'h1;
        if (M_test_5_done) begin
          M_autostate_d = TEST_6_autostate;
        end
      end
      TEST_6_autostate: begin
        io_seg = M_test_6_io_seg;
        io_sel = M_test_6_io_sel;
        opcode_led = M_test_6_opcode_led;
        M_test_6_start = 1'h1;
        if (M_test_6_done) begin
          M_autostate_d = TEST_7_autostate;
        end
      end
      TEST_7_autostate: begin
        io_seg = M_test_7_io_seg;
        io_sel = M_test_7_io_sel;
        opcode_led = M_test_7_opcode_led;
        M_test_7_start = 1'h1;
        if (M_test_7_done) begin
          M_autostate_d = TEST_8_autostate;
        end
      end
      TEST_8_autostate: begin
        io_seg = M_test_8_io_seg;
        io_sel = M_test_8_io_sel;
        opcode_led = M_test_8_opcode_led;
        M_test_8_start = 1'h1;
        if (M_test_8_done) begin
          M_autostate_d = TEST_9_autostate;
        end
      end
      TEST_9_autostate: begin
        io_seg = M_test_9_io_seg;
        io_sel = M_test_9_io_sel;
        opcode_led = M_test_9_opcode_led;
        M_test_9_start = 1'h1;
        if (M_test_9_done) begin
          M_autostate_d = TEST_12_autostate;
        end
      end
      TEST_12_autostate: begin
        io_seg = M_test_12_io_seg;
        io_sel = M_test_12_io_sel;
        opcode_led = M_test_12_opcode_led;
        M_test_12_start = 1'h1;
        if (M_test_12_done) begin
          M_autostate_d = TEST_13_autostate;
        end
      end
      TEST_13_autostate: begin
        io_seg = M_test_13_io_seg;
        io_sel = M_test_13_io_sel;
        opcode_led = M_test_13_opcode_led;
        M_test_13_start = 1'h1;
        if (M_test_13_done) begin
          M_autostate_d = TEST_14_autostate;
        end
      end
      TEST_14_autostate: begin
        io_seg = M_test_14_io_seg;
        io_sel = M_test_14_io_sel;
        opcode_led = M_test_14_opcode_led;
        M_test_14_start = 1'h1;
        if (M_test_14_done) begin
          M_autostate_d = TEST_15_autostate;
        end
      end
      TEST_15_autostate: begin
        io_seg = M_test_15_io_seg;
        io_sel = M_test_15_io_sel;
        opcode_led = M_test_15_opcode_led;
        M_test_15_start = 1'h1;
        if (M_test_15_done) begin
          M_autostate_d = TEST_16_autostate;
        end
      end
      TEST_16_autostate: begin
        io_seg = M_test_16_io_seg;
        io_sel = M_test_16_io_sel;
        opcode_led = M_test_16_opcode_led;
        M_test_16_start = 1'h1;
        if (M_test_16_done) begin
          M_autostate_d = TEST_17_autostate;
        end
      end
      TEST_17_autostate: begin
        io_seg = M_test_17_io_seg;
        io_sel = M_test_17_io_sel;
        opcode_led = M_test_17_opcode_led;
        M_test_17_start = 1'h1;
        if (M_test_17_done) begin
          M_autostate_d = TEST_18_autostate;
        end
      end
      TEST_18_autostate: begin
        io_seg = M_test_18_io_seg;
        io_sel = M_test_18_io_sel;
        opcode_led = M_test_18_opcode_led;
        M_test_18_start = 1'h1;
        if (M_test_18_done) begin
          M_autostate_d = DONE_autostate;
        end
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_autostate_q <= 1'h0;
    end else begin
      M_autostate_q <= M_autostate_d;
    end
  end
  
endmodule
