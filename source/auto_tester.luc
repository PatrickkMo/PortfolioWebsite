module auto_tester (
    input clk,  // clock
    input rst,  // reset
    input start,
    //input restart_btn,
    input error,
    output io_seg[8],
    output io_sel[4],
    output opcode_led[6]
  ) {

  .clk(clk) {
  //  button_conditioner button_cond;
    //edge_detector edge (#RISE(1), #FALL(0));
////button_conditioner required_error;
  //// edge_detector error_edge (#RISE(1), #FALL(0));

    .rst(rst) {
     //multi_seven_seg seg_display;
      fsm autostate = {STANDBY, TEST_0, TEST_1, TEST_2, TEST_3, TEST_4, TEST_5, TEST_6, TEST_7, TEST_8, TEST_9, TEST_10, TEST_11, TEST_12, TEST_13, TEST_14, TEST_15, TEST_16, TEST_17, TEST_18, DONE, ERROR};
      //adder
      statement_tester test_0 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(0), #INPUT_X(16h0001	), #INPUT_Y(16h0002	),  #OPCODE(6b000000), #EXPECTED_OUTPUT(16h0003));
      statement_tester test_1 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(1), #INPUT_X(16h0001	), #INPUT_Y(16hFFFF	), #OPCODE(6b000000), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_2 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(2), #INPUT_X(16h7FFF	), #INPUT_Y(16h0001	), #OPCODE(6b000000), #EXPECTED_OUTPUT(16h8000));
      //subtract
      statement_tester test_3 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(3), #INPUT_X(16h0003), #INPUT_Y(16h0002), #OPCODE(6b000001), #EXPECTED_OUTPUT(16h0001));
      statement_tester test_4 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(4), #INPUT_X(16h0000	), #INPUT_Y(16h0001), #OPCODE(6b000001), #EXPECTED_OUTPUT(16hFFFF));
      statement_tester test_5 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(5), #INPUT_X(16h7fff), #INPUT_Y(16h0000), #OPCODE(6b000001), #EXPECTED_OUTPUT(16h0000));
      //multiply
      statement_tester test_6 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(6), #INPUT_X(16h0003), #INPUT_Y(16h0002), #OPCODE(6b000100), #EXPECTED_OUTPUT(16h0006));
      statement_tester test_7 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(7), #INPUT_X(16hfff2), #INPUT_Y(16hfff3), #OPCODE(6b000100), #EXPECTED_OUTPUT(16hffff));
      //boolean
      statement_tester test_8 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(8), #INPUT_X(16h2f2f), #INPUT_Y(16h0101), #OPCODE(6b010000), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_9 (.error(error),#TEST_ID_HIGH(0), #TEST_ID_LOW(9), #INPUT_X(16hffff), #INPUT_Y(16hffff), #OPCODE(6b010110), #EXPECTED_OUTPUT(16h0000));
      //statement_tester test_10 (.error(error)#TEST_ID_HIGH(1), #TEST_ID_LOW(0), #INPUT_X(16h2af0), #INPUT_Y(16hafe0), #OPCODE(6b010111), #EXPECTED_OUTPUT(16hd51f));
      //statement_tester test_11 (.error(error)#TEST_ID_HIGH(1), #TEST_ID_LOW(1), #INPUT_X(16h0001), #INPUT_Y(16h0002), #OPCODE(6b011010), #EXPECTED_OUTPUT(16h0003));
      
      //shifters
      statement_tester test_12 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(2), #INPUT_X(16hffff), #INPUT_Y(16h0008), #OPCODE(6b100000), #EXPECTED_OUTPUT(16hff00));
      statement_tester test_13 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(3), #INPUT_X(16h3fff), #INPUT_Y(16h0008), #OPCODE(6b100011), #EXPECTED_OUTPUT(16h003f));
      //comparator 
      statement_tester test_14 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(4), #INPUT_X(16h0001), #INPUT_Y(16h0001), #OPCODE(6b110010), #EXPECTED_OUTPUT(16hFFFF));
      statement_tester test_15 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(5), #INPUT_X(16h0000), #INPUT_Y(16h7fff), #OPCODE(6b110101), #EXPECTED_OUTPUT(16h0001));
      statement_tester test_16 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(6), #INPUT_X(16h7fff), #INPUT_Y(16h0000), #OPCODE(6b110111), #EXPECTED_OUTPUT(16h0000));
      statement_tester test_17 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(7), #INPUT_X(16h0202), #INPUT_Y(16hf007), #OPCODE(6b111011), #EXPECTED_OUTPUT(16hf007));
      statement_tester test_18 (.error(error),#TEST_ID_HIGH(1), #TEST_ID_LOW(8), #INPUT_X(16hffff), #INPUT_Y(16hffff), #OPCODE(6b111101), #EXPECTED_OUTPUT(16hffff));

      }
  }

 // sig restart;
  //sig compulsory_error;

  always {
    io_seg = 0;
    io_sel = 0;
    opcode_led = 0;
   //// button_cond.in = restart_btn;
  //  edge.in = button_cond.out;
   // restart = edge.out;

  //  required_error.in = forced_error;
  ////  error_edge.in = required_error.out;
  //  compulsory_error = error_edge.out;


 //   seg_display.values = {4b0,4b0,4b0,4b0};

    test_0.start = 0;
    test_1.start = 0;
    test_2.start = 0;
    test_3.start = 0;
    test_4.start = 0;
    test_5.start = 0;
    test_6.start = 0;
    test_7.start = 0;
    test_8.start = 0;
    test_9.start = 0;
  //  test_10.start = 0;
  //  test_11.start = 0;
    test_12.start = 0;
    test_13.start = 0;
    test_14.start = 0;
    test_15.start = 0;
    test_16.start = 0;
    test_17.start = 0;
    test_18.start = 0;
    
    
  
    case (autostate.q) {
      autostate.STANDBY:
        if (start) {
          autostate.d = autostate.TEST_0;
        }
      
      autostate.TEST_0:
        io_seg = test_0.io_seg;
        io_sel = test_0.io_sel;
        opcode_led = test_0.opcode_led;
        test_0.start = 1;
        if (test_0.done) {
          autostate.d = autostate.TEST_1;
        }
        

      autostate.TEST_1:
        io_seg = test_1.io_seg;
        io_sel = test_1.io_sel;
        opcode_led = test_1.opcode_led;
        test_1.start = 1;
        if (test_1.done) {
          autostate.d = autostate.TEST_2;
        }
     
      autostate.TEST_2:
        io_seg = test_2.io_seg;
        io_sel = test_2.io_sel;
        opcode_led = test_2.opcode_led;
        test_2.start = 1;
        if (test_2.done) {
          autostate.d = autostate.TEST_3;
        }
      
      autostate.TEST_3:
        io_seg = test_3.io_seg;
        io_sel = test_3.io_sel;
        opcode_led = test_3.opcode_led;
        test_3.start = 1;
        if (test_3.done) {
          autostate.d = autostate.TEST_4;
        }
       
      autostate.TEST_4:
        io_seg = test_4.io_seg;
        io_sel = test_4.io_sel;
        opcode_led = test_4.opcode_led;
        test_4.start = 1;
        if (test_4.done) {
          autostate.d = autostate.TEST_5;
        }
       
      autostate.TEST_5:
        io_seg = test_5.io_seg;
        io_sel = test_5.io_sel;
        opcode_led = test_5.opcode_led;
        test_5.start = 1;
        if (test_5.done) {
          autostate.d = autostate.TEST_6;
        }
        
       autostate.TEST_6:
        io_seg = test_6.io_seg;
        io_sel = test_6.io_sel;
        opcode_led = test_6.opcode_led;
        test_6.start = 1;
        if (test_6.done) {
          autostate.d = autostate.TEST_7;
        }
      autostate.TEST_7:
        io_seg = test_7.io_seg;
        io_sel = test_7.io_sel;
        opcode_led = test_7.opcode_led;
        test_7.start = 1;
        if (test_7.done) {
          autostate.d = autostate.TEST_8;
        }
     
      autostate.TEST_8:
        io_seg = test_8.io_seg;
        io_sel = test_8.io_sel;
        opcode_led = test_8.opcode_led;
        test_8.start = 1;
        if (test_8.done) {
          autostate.d = autostate.TEST_9;
        }
      
      autostate.TEST_9:
        
        io_seg = test_9.io_seg;
        io_sel = test_9.io_sel;
        opcode_led   = test_9.opcode_led;
        
        test_9.start = 1;

        if( test_9.done){
        autostate.d = autostate.TEST_12;
        }
      
      //autostate.TEST_10:
        //io_seg = test_10.io_seg;
        //io_sel = test_10.io_sel;
        //opcode_led = test_10.opcode_led;
        //test_10.start = 1;
        //if (test_10.done) {
          //autostate.d = autostate.TEST_11;
        //}
        

     // autostate.TEST_11:
      //  io_seg = test_11.io_seg;
      //  io_sel = test_11.io_sel;
      //  opcode_led = test_11.opcode_led;
       // test_11.start = 1;
       // if (test_11.done) {
       //   autostate.d = autostate.TEST_12;
       // }
        
        autostate.TEST_12:
        io_seg = test_12.io_seg;
        io_sel = test_12.io_sel;
        opcode_led = test_12.opcode_led;
        test_12.start = 1;
        if (test_12.done) {
          autostate.d = autostate.TEST_13;
        }
        autostate.TEST_13:
        io_seg = test_13.io_seg;
        io_sel = test_13.io_sel;
        opcode_led = test_13.opcode_led;
        test_13.start = 1;
        if (test_13.done) {
          autostate.d = autostate.TEST_14;
        }
        autostate.TEST_14:
        io_seg = test_14.io_seg;
        io_sel = test_14.io_sel;
        opcode_led = test_14.opcode_led;
        test_14.start = 1;
        if (test_14.done) {
          autostate.d = autostate.TEST_15;
        }
        autostate.TEST_15:
        io_seg = test_15.io_seg;
        io_sel = test_15.io_sel;
        opcode_led = test_15.opcode_led;
        test_15.start = 1;
        if (test_15.done) {
          autostate.d = autostate.TEST_16;
        }
        autostate.TEST_16:
        io_seg = test_16.io_seg;
        io_sel = test_16.io_sel;
        opcode_led = test_16.opcode_led;
        test_16.start = 1;
        if (test_16.done) {
          autostate.d = autostate.TEST_17;
        }
        autostate.TEST_17:
        io_seg = test_17.io_seg;
        io_sel = test_17.io_sel;
        opcode_led = test_17.opcode_led;
        test_17.start = 1;
        if (test_17.done) {
          autostate.d = autostate.TEST_18;
        }
        
        

  
        autostate.TEST_18:
        io_seg = test_18.io_seg;
        io_sel = test_18.io_sel;
        opcode_led = test_18.opcode_led;
        test_18.start = 1;
        if (test_18.done) {
          autostate.d = autostate.DONE;
        }
     

       
      
 //     autostate.DONE:
   //     if (restart) {
     //     autostate.d = autostate.TEST_0;
       // }

     // autostate.ERROR:
//        opcode_led = 6b000000;
  //     / seg_display.values = {4he, 4he, 4he, 4he}; // EEEE
    //    io_seg = ~seg_display.seg;
      //  io_sel = ~seg_display.sel;
       //if (restart) {
         // autostate.d = autostate.TEST_0;
        }
    }
  }
